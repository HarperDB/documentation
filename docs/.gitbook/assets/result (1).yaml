openapi: 3.0.0
info:
  title: HarperDB 4.1.0
  description: >-
    Welcome to HarperDB API reference!


    Here you find interface descriptions for all HarperDB API operations with
    example code.  To see example code in various programming languages, use the
    language dropdown in the top navigation to select your desired coding
    language. Use the Run in Postman button, at the top right, to open the
    HarperDB API operations as a Postman collection where you can edit and
    modify each request.


    • <a href="https://studio.harperdb.io/">HarperDB Studio</a>


    • <a href="https://docs.harperdb.io/">HarperDB Documentation</a>


    • <a href="https://harperdb.io/docs/getting-started/">Installation & Getting
    Started</a>


    • Authentication Guides: <a
    href="https://harperdb.io/docs/security/authentication/">Basic Auth</a> or
    <a href="https://harperdb.io/docs/security/jwt-authentication/">Token
    Auth</a>


    • <a href="https://harperdbhelp.zendesk.com/hc/en-us/requests/new">Submit a
    HarperDB Support Request</a>


    • <a href="https://olddocs.harperdb.io">Past Release API Documentation</a>
  version: 1.0.0
servers:
  - url: http://{{hdb_endpoint}}
tags:
  - name: QuickStart Examples
paths:
  /:
    post:
      tags:
        - QuickStart Examples
      summary: Create dog Table
      description: >-
        Next, we'll create our first table.  Since our company is named after
        our CEO's dog, lets create a table to store all our employees' dogs.
        We'll call this table, 'dogs'.


        Tables in HarperDB are schema-less, so we don't need to add any
        attributes other than a hash_attribute to create this table.  A hash
        attribute is an attribute that defines the unique identifier for each
        row in your table.  In a traditional RDMS this would be called a primary
        key.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"operation\": \"create_table\",\n    \"schema\":
                \"dev\",\n    \"table\": \"dog\",\n    \"hash_attribute\":
                \"id\"\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '51'
            Date:
              schema:
                type: string
                example: Fri, 15 Jan 2021 22:22:29 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                message: table 'dev.dog' successfully created.
